package lesson_03;

public class MathOperations {
    public static void main(String[] args) {
        int var1 = 20; // создаем несколько перемнных
        int var2 = 7; // перейдем к сложению числе

        int result;

        // в переменную!!! result я хочу присвоить какую то переменную
        result = 15 + 6;
        // если есть переменная и что-то стоит в правой части. Наш компелятор вначале
        // 1. Вычисляет результат выражение, которое находиться справа от равно =
        // 2. Вторым делом будет результат вычисления присваивается переменной которая находиться слева от равно

        System.out.println("Результат переменной Result: " + result);

        // все в тот же резалт я хочу сложить результат вычисления который я запишу вар1 + вар 2
        result = var1 + var2;
        System.out.println("Результат два Result: " + result);
        // Что произойдет компилятор вначале вытащит одно число из вар1 + его с числом из вар 2 - так как больше складывать нечего, присвоет значение в результат резалт
        // сложи вар со значением переменной вар 2 присвой результат в переменную с название резалт
        // могут быть также вариации с цифрами прмер:     result = var1 + var2 + 100;

        // После паузы / Доавим еще 1 переменную
        int var3 = 10;
        var3 = var3 + 5;

        System.out.println("Var3: " + var3);
        // Вначале вычисляется выражение которое справа от знака равно
        // компилятор вытаскивает значение 10 прибавляет 5 получается 15
        // Этот результат перезаписывается от вар 3 (Норм запись, в вычислениях использовать старое значение и переприсвоить новое значение
        // все что угодно сделать со старыми цифрами. Вначале все справа от равно, не смотря в лево.
        // var3 = var3 + var3 + 5; могло быть и так. Один раз вытащила текущее, второй раз вытащила текущее и прибавила 5.
        // нам Татарам все равно, есть план действий
        // манипуляции со старыми даными достаточно популярно, даже есть форма записи специальная.
        // var3 += 5; возьми старое значение вар 3 добавь к нему 5 и перезапиши в вар 3
        // идентично сокращенная запись
        var3 += 5;
        System.out.println("Var3: " + var3);

        var3 += 1;  // идентично вар3 = вар3 +1
        // var3 += 1; это так часто var3 = var3 += 1;
        // инкремент вар3 ++; добавить к текущему значению переменной вар3 один  (var3 ++; var3 +=1; var3 = var3 += 1;
        var3++;
        System.out.println("Значение короткое Var3: " + var3);


        //  Дальше: Возьмем маленькую переменную байтового типа байт1
        byte byte1 = 127; // Входит только от -128 до 127 ровно
        System.out.println("byte1: " + byte1);

        byte1++;

        System.out.println("Byte2: " + byte1); // получился минус Почему? Называется это переполнение типа. Байт хранит от -128 до 127 ровно
        // когда мы совершаю какую то операцию над числом байт и результат операции выходит за верхнюю границу предела происходит переполнение типа данных
        // переменная как циферблат часов доходим до 11 12 и по кругу, внизу 0
        // когда в 0 то это нормально. Но когда мы упираемся в верхнюю границу диапозона или в нижнюю, получается переполнение
        // -128 нижняя и 127 верхняя
        //  Если от -128 отнять -1 то мы получим 127 все пойдет по кругу
        // Это происходит и с шорт и инт надо следить за переполнением типов, если мы думаем числа будут большие не надо брать байт
        //лучше брать int!!!!!!!!!!!!!! - этого диапозона достаточно

        // ВЫЧИТАНИЕ -
        result = var1 - 11;
        System.out.println(" Значение вычитания пременной: " + result);
        // резалт берет вар 1 подставляет 20 20 вычитает 11

        result = var1 - var2;
        System.out.println("Значение вычитания 2: " + result);


        int var4 = 100;
        var4 = var4 - 10; // 100 - 10 и присвоить в вар4 результат
        var4 -= 20; // короткая форма записи var4 = var4 -20
        System.out.println("Результат var4: " + result);
        // есть также декримент
        // var4--; короткая форма записи для уменьшения значения на единицу
        // var4 = var4 -1;
        var4--;
        System.out.println("Значение var4: " + var4);

        //УМНОЖЕНИЕ *
        result = var1 * var2;
        System.out.println("Умножение var: " + result);
        // есть комбинация клавиш прибраться (alt + schift + F)

        // для увеличения 1 переменной можно сделать result *=2; будет result = result * 2
        result = result * 2;
        System.out.println("Короткая запись: " + result);

        // ДЕЛЕНИЕ /
        // Целочисленное деление - / (вот такой слеш)
        result = var1 / var2; // 20 делим на 7
        System.out.println("Деление: " + result); // когда делим одно целое на др целое ( 20 разделить на 7 - было бы 2 и 6 в остатке
        // одно целое на др целое  - выдвет только целое число. 7 помещается 2 раза в 20
        // остаток не делится еще на 7.... Результат будет целое число.

        int var5 = 5;
        result = var5 / 10; // получим в результате 0
        int rest = var5 % 10;

        System.out.println("деление числа: " + result + "; отстаnок равен: " + rest);
        // получаем 0 целых в число 5 число 10 помещается 0 раз и в остатке будет 5
        // остаток отбрасывается и в результате получаем 0
        // как нам понять что с остатком. ???? и в остатке столько то
        // Мы придумали операцию % и называется - остаток от деления
        result = var1 % var2; // вар1 взять остаток от деления с вар2
        System.out.println("Остаток от деления 20/7: " + result);
        //  в результат операции вычисления (будет равен остатку от целочисленного деления)
        //  записывается остаток от целочисленного деления вар 1 на вар2
        System.out.println((28 / 10)); // выведется 2
        System.out.println((28 % 10));  // выведется 8
        // 28/ 10 = 2 целых и 8 в остатке

        // ОПЕРАЦИЯ деления.Провести ее можно только числами с плавающей точкой
        // опред -я тоже /
        double doubleVar = 20.0; // все числа записанные с точкой в коде считаются типом дабл. Можно поставить d после числа - это указывает что число в формате дабл
        double doubleSeven = 7.0d;

        double resultDouble = doubleVar / doubleSeven; // повторно обьявить переменную в одном типе кода нельзя
        System.out.println("Результат деления в формате double: " + resultDouble);
        // когда мы производим деление с дабл производится обычное деление.
        // Деление на интах или других целых числах (остаток отрбрасывается)
        //    дабл складывать вычитать и делить, нет взять остаток от деления - такого нет и не надо
        // у дабл етсь проблема дабл х равен 0.1 и дабл y равен 0.2 и мы хотим получить их сумму

        double x = 0.1;
        double y = 0.2;
        double z = x + y;
        System.out.println("Результат сумма z: " + z); // почему так просходит - операции с дабл могут быть не совсем точными
        // никто не хранит число 0.1 числа хранятся в дробях
        // число хранится в виде иррациональных дробей
        // в денежных приложениях можно испоьзовать дабл, но в программах нет!!!!! Это просто для учебы
        // для хранения дабл выделяют много памяти 64 бита = 8 байтов
        // IEEE 754 стандарт хранения чисел с плавающей точкой




               }

    }

