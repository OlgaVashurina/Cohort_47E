package lesson_04;

public class Casting {
    public static void main(String[] args) {

        // Одна примитивная в другой называется преобразованием типов
        // существует 2 вида преобразования в джава: явный и не явное преобразование
        // не явное происходит автоматически, когда значение меньшего типа данных ( где менбше инфы чем в дургом)
        // Когда значение данных преобразуется в больший тип данных
        // байт велью  +123  тип инт  вал от мииллиардов дл....
        byte byteVal = 123; // ((-127 до 123) ...-128 ... 127 меньший тип
        int intval = byteVal; // ( от минус 2 мл до плюс 2 млрд) больший тип
        intval = byteVal;// неявное преобразование типа байт в тип инт

        // процесс преобразование одной переменной в др тип из инт в дабл.
        // в джава 2 вида преобразования явный и не явный
        // явное и не явное преобразование
        // не явное автоматически  - когда значение меньшего типа данных (где меньше инфы) когда значение
        // ..данных преобразуется в больший тип данных  byte byteVal = 123;
        // byte byteVal = 123; - 128 до 127 меньший тип байт
        // int intval = Byteval;  больший тип инт ( от минус 2 милл до плюс 2 млрд)
        // байт меньший, инт больший
        // intVal = byteVal; не явное из типа байт в тип инт - ничего не потеряется и не пропадет.
        //Происходит автоматически, когда тип данных с меньшим диапазоном значений преобразуется в тип данных с большим диапазоном значений. Например, преобразование byte в int.
        // Представьте, что вы наливаете воду из маленькой чашки в большой кувшин. В этом случае вам не нужно беспокоиться о том,
        // что вода прольется, потому что большой кувшин может вместить гораздо больше воды,
        // чем маленькая чашка. Это похоже на неявное преобразование типов, когда вы можете
        // без проблем налить меньшее количество (например, из byte в int).
        int intValue = 42;
        double doubleValue = intValue; // не явное преобразование инта в дабл - возьмется число в инте и после цифры поставится точечка - все я тебя преобразовал


        // ТЕПЕЬ ОБРАТНЫЙ ВАРИАНТ
//Явное преобразование - требуется когда из большего надо в меньшее из дабл в инт
        // из большего в меньшее тип а до 2 млр а ты пытаешься засунуть в коробочку где 256 значений
        // требуется когда нужно перобразовать значение большего типа данных в значение меньшего
        // Поскольку это может привести к потере данных
        double double1 = 42.9;
        int int1 = (int) double1; // явное преобразование из дабл в инт - не скомпелируется и при преобразовании в инт что то потеряется
        // из большего в меньший в круглых нуно написать
        // что я хочу тип данных дабл преобразовать в инт тем самым явно указать что я дабл преобразовываю в инт
        // потому что кампилятор сначала считает то что справа
        System.out.println("double1" + double1);
        System.out.println("int1" + int1);

//
//
// Теперь представьте обратную ситуацию: вы пытаетесь налить воду из большого кувшина в маленькую чашку.
// Здесь вам нужно быть осторожным, чтобы не перелить воду, потому что маленькая чашка может вместить меньше жидкости, чем большой кувшин.
// Это похоже на явное преобразование типов,
// когда вы преобразуете большее количество данных в меньшее (например, из int в byte), и нужно быть осторожным, чтобы не потерять данные.


        int x = 20;
        int y = 7;

        double result;
        result = x / y;
        System.out.println("Результат: " + result);

        result = x / 7.0; // когда в формуле присутствует хотя бы 1 тип дабл.(с плавающий точкой, дабл или флоут
        // сдесь происходит деление дабл на далбл
        // вес остальные целочисленные типы в этом выражении атвоматически, костируются к типу дабл
        // на выходе 20.0 на 7.0 обычное деление, результат которого будет число в формате дабл


        System.out.println("Результат: " + result);
        // мне достаточно один из типов кастировать к типу даблю
        //хочу резалт х на у; можно 1 тип превести к флоут
        result = (float) x / y; // оно будет пероизведено деленеие обычное деление, не целочисленные
        System.out.println("Float: " + result);
        result = x / (double) y;
        System.out.println("Double: " + result);
        // Зачем нам кастирование? если мы хоти поменять тип операции


    }
}